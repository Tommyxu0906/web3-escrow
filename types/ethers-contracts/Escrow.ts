/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface EscrowInterface extends Interface {
    getFunction(nameOrSignature: "createEscrow" | "deals" | "deposit"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "EscrowCreated" | "FundsDeposited"): EventFragment;

    encodeFunctionData(functionFragment: 'createEscrow', values: [AddressLike, AddressLike, BigNumberish, BigNumberish]): string;
encodeFunctionData(functionFragment: 'deals', values: [BytesLike]): string;
encodeFunctionData(functionFragment: 'deposit', values: [BytesLike]): string;

    decodeFunctionResult(functionFragment: 'createEscrow', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deals', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'deposit', data: BytesLike): Result;
  }

  
    export namespace EscrowCreatedEvent {
      export type InputTuple = [id: BytesLike, buyer: AddressLike, seller: AddressLike, amount: BigNumberish, deadline: BigNumberish];
      export type OutputTuple = [id: string, buyer: string, seller: string, amount: bigint, deadline: bigint];
      export interface OutputObject {id: string, buyer: string, seller: string, amount: bigint, deadline: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

    export namespace FundsDepositedEvent {
      export type InputTuple = [id: BytesLike, buyer: AddressLike, amount: BigNumberish];
      export type OutputTuple = [id: string, buyer: string, amount: bigint];
      export interface OutputObject {id: string, buyer: string, amount: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface Escrow extends BaseContract {
    
    connect(runner?: ContractRunner | null): Escrow;
    waitForDeployment(): Promise<this>;

    interface: EscrowInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    createEscrow: TypedContractMethod<
      [buyer: AddressLike, seller: AddressLike, amount: BigNumberish, deadline: BigNumberish, ],
      [string],
      'nonpayable'
    >
    

    
    deals: TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, string, bigint, bigint, bigint] & {buyer: string, seller: string, amount: bigint, deadline: bigint, status: bigint }],
      'view'
    >
    

    
    deposit: TypedContractMethod<
      [id: BytesLike, ],
      [void],
      'payable'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'createEscrow'): TypedContractMethod<
      [buyer: AddressLike, seller: AddressLike, amount: BigNumberish, deadline: BigNumberish, ],
      [string],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'deals'): TypedContractMethod<
      [arg0: BytesLike, ],
      [[string, string, bigint, bigint, bigint] & {buyer: string, seller: string, amount: bigint, deadline: bigint, status: bigint }],
      'view'
    >;
getFunction(nameOrSignature: 'deposit'): TypedContractMethod<
      [id: BytesLike, ],
      [void],
      'payable'
    >;

    getEvent(key: 'EscrowCreated'): TypedContractEvent<EscrowCreatedEvent.InputTuple, EscrowCreatedEvent.OutputTuple, EscrowCreatedEvent.OutputObject>;
getEvent(key: 'FundsDeposited'): TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;

    filters: {
      
      'EscrowCreated(bytes32,address,address,uint256,uint64)': TypedContractEvent<EscrowCreatedEvent.InputTuple, EscrowCreatedEvent.OutputTuple, EscrowCreatedEvent.OutputObject>;
      EscrowCreated: TypedContractEvent<EscrowCreatedEvent.InputTuple, EscrowCreatedEvent.OutputTuple, EscrowCreatedEvent.OutputObject>;
    

      'FundsDeposited(bytes32,address,uint256)': TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;
      FundsDeposited: TypedContractEvent<FundsDepositedEvent.InputTuple, FundsDepositedEvent.OutputTuple, FundsDepositedEvent.OutputObject>;
    
    };
  }